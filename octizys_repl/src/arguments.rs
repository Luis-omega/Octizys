use clap::{Parser, Subcommand, ValueEnum};
use std::path::PathBuf;

#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum, Debug)]
pub enum AvailableParser {
    #[clap(name = "import", help = "Use the parser for import statements.")]
    Import,
    #[clap(name = "type", help = "Use the parser for the type expressions.")]
    Type,
    #[clap(name = "top", help = "Use the parser of a whole file.")]
    Top,
}

#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum, Debug)]
pub enum AvailableRenderers {
    #[clap(
        name = "plain",
        help = "Plain text, don't use colors or bold or italic or any thing that isn't text."
    )]
    PlainText,
    #[clap(
        name = "ansi4",
        help = "For terminals that support the 4 bits color scheme."
    )]
    AnsiC4,
    #[clap(
        name = "ansi8",
        help = "For terminals that support the 8 bits color scheme."
    )]
    AnsiC8,
    #[clap(
        name = "ansi24",
        help = "For terminals that support the 24 bits (true color) color scheme."
    )]
    AnsiC24,
}

#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum, Debug)]
pub enum DebugFormatOption {
    #[clap(
        name = "pretty",
        help = "Use the rust pretty print debug option {:#?}."
    )]
    PrettyDebug,
    #[clap(name = "normal", help = "Use the rust regular debug option {:?}.")]
    Debug,
    #[clap(
        name = "equiv",
        help = "Use the Equivalence trait (defined in octizys) to create a S-Expression."
    )]
    EquivalenceRepresentation,
}

#[derive(Parser, Clone, Debug)]
pub struct Configuration {
    #[arg(
        short = 'p',
        long = "parser",
        default_value = "import",
        help = "The parser to use on the input."
    )]
    pub parser: AvailableParser,
    #[arg(
        long = "tokens",
        name = "SHOW_TOKENS",
        help = "Show the token stream generated by the lexer."
    )]
    pub show_tokens: bool,
    #[arg(
        long = "cst",
        name = "SHOW_CST",
        help = "Show the CST (Concrete Syntax Tree) generated based on the input."
    )]
    pub show_cst: bool,
    #[arg(
        long = "doc",
        name = "SHOW_DOC",
        help = "Show the Document (pretty printter AST) of the CST (Concrete Syntax Tree)."
    )]
    pub show_doc: bool,
    #[arg(
        short = 'f',
        long = "format",
        name = "PRINTING_FORMAT",
        default_value = "normal",
        help = "The option used inside format to show intermediate structures"
    )]
    pub display_format: DebugFormatOption,
    #[arg(
        short = 'r',
        long = "renderer",
        default_value = "ansi24",
        help = "
Define the renderer backend to use to pretty print the generated CST (Concrete Syntax Tree).
This affects the available colors and styles."
    )]
    pub renderer: AvailableRenderers,
    #[arg(
        short = 'c',
        long = "column-width",
        default_value = "80",
        help = "The maximum amount of columns to use for formatting"
    )]
    pub column_width: usize,
    //TODO: when we have environment arguments, actualize the help.
    //We want environment variables, to handle the color as that is the common
    //way to do it!
    #[arg(
        short = 'a',
        long = "show_arguments",
        help = "Show the passed arguments and exit."
    )]
    pub show_arguments: bool,
}

#[derive(Subcommand, Debug)]
pub enum Commands {
    #[command(name = "string")]
    #[command(about = "Parse a text string.")]
    ParseString {
        string: String,
        #[command(flatten)]
        configuration: Configuration,
        #[arg(
            short = 'o',
            long = "output",
            name = "FILE",
            help = "A output file for a image representation of the CST (Concrete Syntax Tree) generated  for the input. If omitted, not image would be generated."
        )]
        image_path: Option<PathBuf>,
    },
    #[command(name = "file")]
    #[command(about = "Parse a complete file.")]
    ParseFile {
        path: PathBuf,
        #[command(flatten)]
        configuration: Configuration,
        #[arg(
            short = 'o',
            long = "output",
            name = "FILE",
            help = "A output file for a image representation of the CST (Concrete Syntax Tree) generated  for the input. If omitted, not image would be generated."
        )]
        image_path: Option<PathBuf>,
    },
    #[command(name = "repl")]
    #[command(about = "Start a REPL (Read Eval Print Loop) for octizys")]
    REPL {
        #[command(flatten)]
        configuration: Configuration,
    },
}

#[derive(Parser, Debug)]
#[command(version = "1.0")]
#[command(about = "The octizys repl", long_about = None)]
#[command(propagate_version = true)]
pub struct Arguments {
    #[command(subcommand)]
    pub command: Commands,
}
