use std::fmt::Display;

/// A tree structure that can represent any node.
/// Useful to test different parts of the compiler.

/// A Tree with and arbitrary number of items
/// Since we are going to use this for testing, the representation
/// can be suboptimal using a box and a generic tree.
/// For optimization the `recurse`crate may be useful.
///
/// The Display implementation transfoms the tree into a String
/// containing a indented Sexpression.
#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Tree<T> {
    Node { value: T, children: Vec<Tree<T>> },
}

pub enum TreeCompareError<'items, T> {
    DifferentsBranches {
        left: &'items Tree<T>,
        right: &'items Tree<T>,
    },
    MissingLeftBranch(&'items Tree<T>),
    MissingRRightBranch(&'items Tree<T>),
}

/// zip together two arrays of tree completely or fail!
fn zip_tree_arrays<'items, T>(
    left: &'items Vec<Tree<T>>,
    right: &'items Vec<Tree<T>>,
) -> Result<Vec<(&'items Tree<T>, &'items Tree<T>)>, TreeCompareError<'items, T>>
{
    todo!()
}

impl<T> Tree<T> {
    /// Compare every branch iteratively until we find one with a difference
    /// then we return the two different branches.
    // TODO: maybe allow find all the branches for more errors after the first?
    // TODO: maybe return a path to the branches to help with diff?
    pub fn compare<'items>(
        &'items self,
        rhs: &'items Self,
    ) -> Result<(), TreeCompareError<'items, T>>
    where
        T: Eq,
    {
        let mut stack = vec![(self, rhs)];
        while stack.len() > 0 {
            let (left, right) = stack.pop().unwrap();
            if left.value() != right.value() {
                return Err(TreeCompareError::DifferentsBranches {
                    left,
                    right,
                });
            }
            match mut zip_tree_arrays(left.children(), right.children()) {
                Ok(elems) => stack.extend(elems.reverse()),
                Err(e) => return Err(e),
            }
        }
        return Ok(());
    }

    /// Returns a reference to the value of a node.
    #[inline]
    pub fn value(&self) -> &T {
        match self {
            Tree::Node { value, .. } => value,
        }
    }

    /// Returns a reference to the children of a node.
    #[inline]
    pub fn children(&self) -> &Vec<Tree<T>> {
        match self {
            Tree::Node { children, .. } => children,
        }
    }

    /// Takes a generic tree over T and a function and traverses the
    /// tree creating a new one over G.
    pub fn map<G>(&self, f: fn(T) -> G) -> Tree<G> {
        todo!()
    }
}

impl<T> Display for Tree<T> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        todo!()
    }
}
